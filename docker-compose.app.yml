services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_app
    ports:
      - "8000:8000"
    networks:
      - front-tier
      - back-tier
    depends_on:
      - postgres_db
    env_file:
      - backend/.env

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_app
    ports:
      - "5173:5173"
    networks:
      - front-tier
    env_file:
      - frontend/.env

  postgres_db:
    image: postgres:17-alpine3.21
    container_name: postgres_db
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: my_password
      POSTGRES_DB: app
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - back-tier

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - back-tier

  nginx_proxy:
    image: jc21/nginx-proxy-manager
    container_name: nginx_proxy_manager
    ports:
      - "80:80"
      # - "443:443"
      - "8090:81"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - data:/data
      - ./nginx/nginx.dev.conf:/data/nginx/custom/http_top.conf
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - postgres_db
      - backend
      - frontend
      - adminer
    networks:
      - front-tier
      - back-tier
    
volumes:
  postgres_data:
  data:
  letsencrypt:
  
networks:
  front-tier:
  back-tier: